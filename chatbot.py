import streamlit as st
import openai
import os
from dotenv import load_dotenv
import PyPDF2
import io

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Simple ChatGPT Chatbot", page_icon="ü§ñ", layout="wide")


def extract_text_from_pdf(pdf_file):
    """H√†m tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ file PDF ho·∫∑c TXT ƒë√£ t·∫£i l√™n.
    ƒê·∫ßu v√†o l√† file ƒë√£ t·∫£i l√™n, ƒë·∫ßu ra l√† chu·ªói vƒÉn b·∫£n"""
    try:
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_file.read()))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ file PDF: {e}")
        return ""


def create_context_message(context_text, tone=""):
    """T·∫°o th√¥ng ƒëi·ªáp h·ªá th·ªëng v·ªõi context.
    ƒê·∫ßu v√†o l√† vƒÉn b·∫£n context v√† vai tr√≤, ƒë·∫ßu ra l√† chu·ªói th√¥ng ƒëi·ªáp h·ªá th·ªëng"""
    base_prompt = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán."
    if tone:
        base_prompt += f" H√£y tr·∫£ l·ªùi v·ªõi tong gi·ªçng {tone}."
    if context_text:
        base_prompt += f"Tham kh·∫£o nh·ªØng th√¥ng tin sau khi tr·∫£ l·ªùi:\n\n{context_text}\n\nH√£y s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt."
    return base_prompt


def initialize_openai():
    """Kh·ªüi t·∫°o client OpenAI v·ªõi kh√≥a API.
    ƒê·∫ßu ra l√† client OpenAI ƒë√£ kh·ªüi t·∫°o"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("Vui l√≤ng cung c·∫•p kh√≥a API OpenAI trong bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY.")
        st.stop()
    client = openai.Client(api_key=api_key)
    return client


def get_chatgpt_response(messages, client=None):
    """L·∫•y ph·∫£n h·ªìi t·ª´ API ChatGPT.
    ƒê·∫ßu v√†o l√† danh s√°ch tin nh·∫Øn, ƒë·∫ßu ra l√† ph·∫£n h·ªìi t·ª´ ChatGPT"""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.7,
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ ChatGPT: {e}")
    return


def main():
    # Kh·ªüi t·∫°o client OpenAI
    openai_client = initialize_openai()

    # Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ v·ªõi st.title v√† st.markdown
    st.title("ü§ñ ToanTran Chatbot")
    st.markdown(
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω AI c√° nh√¢n c·ªßa m√¨nh! H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨."
    )

    # T·∫°o box h∆∞·ªõng d·∫´n v·ªõi st.expander v√† st.markdown
    ##### CODE SNIPPET START #####
    with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):\
        st.markdown("""
            **C√°ch th√™m context v√†o chatbot:**
            1. **Ch·ªçn tone gi·ªçng**: Ch·ªçn tone gi·ªçng cho AI trong sidebar (b√¨nh th∆∞·ªùng, h√†i h∆∞·ªõc, nghi√™m t√∫c...)
            2. **Nh·∫≠p text**: Vi·∫øt th√¥ng tin tham kh·∫£o v√†o √¥ "Nh·∫≠p context"
            3. **Upload file**: T·∫£i l√™n file .txt ho·∫∑c .pdf ch·ª©a th√¥ng tin
            4. **B·∫Øt ƒë·∫ßu chat**: AI s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n context b·∫°n cung c·∫•p
            
            **V√≠ d·ª• context:**
            - Th√¥ng tin v·ªÅ c√¥ng ty, s·∫£n ph·∫©m
            - T√†i li·ªáu h∆∞·ªõng d·∫´n, quy tr√¨nh
            - Ki·∫øn th·ª©c chuy√™n m√¥n c·ª• th·ªÉ
            - D·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch
        """)

    # Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n cho l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
    # D√πng st.session_state ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i cu·ªôc tr√≤ chuy·ªán
    ##### CODE SNIPPET START #####
    if "messages" not in st.session_state:
        st.session_state.messages = [
            { "role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán." }
        ]
    
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    if "system_message" not in st.session_state:
        st.session_state.system_message = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán."

    # Kh·ªüi t·∫°o sidebar v·ªõi st.sidebar
    ##### CODE SNIPPET START #####
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")

        # M·ª•c Context
        st.subheader("üìö Th√™m Context")

        # Ch·ªçn tone gi·ªçng AI
        # T·∫°o dropdown menu v·ªõi st.selectbox
        tone_options = ["Trung t√≠nh", "Th√¢n thi·ªán", "Chuy√™n nghi·ªáp", "H√†i h∆∞·ªõc"]
        selected_tone = st.selectbox(
            "Ch·ªçn tone gi·ªçng AI",
            options=tone_options,
            key="tone_select",
            index=0,
        )

        # Nh·∫≠p context th√π c√¥ng b·∫±ng text area
        context_text = st.text_area(
            "Nh·∫≠p context cho AI (n·∫øu c√≥):",
            height=150,
            placeholder="Nh·∫≠p th√¥ng tin ho·∫∑c h∆∞·ªõng d·∫´n cho AI t·∫°i ƒë√¢y...",
            value=(st.session_state.get("context_text", "")),
            key="context_input",
        )

        # L∆∞u context v√†o session state
        st.session_state.context_text = context_text

        # Hi·ªÉn th·ªã ƒë·ªô d√†i context v√† n√∫t x√≥a context
        if context_text:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"**ƒê·ªô d√†i context:** {len(context_text)} k√Ω t·ª±")
            with col2:
                if st.button("üóëÔ∏è", key="clear_context"):
                    st.session_state.context_text = ""

        # T·∫£i l√™n file context n·∫øu kh√¥ng mu·ªën nh·∫≠p tay
        # H·ªó tr·ª£ file .txt v√† .pdf
        uploaded_file = st.file_uploader(
            "T·∫£i l√™n file context (txt ho·∫∑c pdf):",
            type=["txt", "pdf"],
            key="file_uploader",
        )

        # X·ª≠ l√Ω file ƒë√£ t·∫£i l√™n v√† th√™m v√†o file_context
        file_context = ""
        if uploaded_file is not None:
            if uploaded_file.type == "text/plain":
                # Xu ly file txt
                file_context = uploaded_file.getvalue().decode("utf-8")
                st.success("ƒê√£ t·∫£i l√™n file TXT th√†nh c√¥ng!")
            if uploaded_file.type == "application/pdf":
                # Xu ly file pdf
                file_context = extract_text_from_pdf(uploaded_file)
                if file_context:
                    st.success("ƒê√£ t·∫£i l√™n file PDF th√†nh c√¥ng!")
                else:
                    st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ file PDF.")

        # K·∫øt h·ª£p context t·ª´ text area v√† file
        full_context = ""
        if context_text:
            full_context += context_text + "\n"
        if file_context:
            full_context += file_context + "\n"

        # C·∫≠p nh·∫≠t context cho h·ªá th·ªëng n·∫øu context thay ƒë·ªïi
        if full_context:
            system_message = create_context_message(full_context, selected_tone)
            if (
                "system_message" not in st.session_state
                or st.session_state.system_message != system_message
            ):
                st.session_state.system_message = system_message
                st.session_state.messages = [
                    {"role": "system", "content": system_message}
                ]
                st.session_state.chat_history = []
                st.success("ƒê√£ c·∫≠p nh·∫≠t context cho AI!")

        # T·∫°o n√∫t x√≥a cu·ªôc tr√≤ chuy·ªán v√† gi·ªØ nguy√™n th√¥ng ƒëi·ªáp h·ªá th·ªëng
        st.button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán", key="clear_chat")

        # Hi·ªÉn th·ªã context hi·ªán t·∫°i n·∫øu c√≥
        if full_context:
            with st.expander("üîç Xem context hi·ªán t·∫°i"):
                st.text_area("Context hi·ªán t·∫°i:", 
                             value=full_context, 
                             height=300, 
                             disabled=True
                            )

        # Hi·ªán th·ªã tone gi·ªçng hi·ªán t·∫°i n·∫øu c√≥
        if selected_tone:
            st.info(f"Tone gi·ªçng hi·ªán t·∫°i: {selected_tone}")

        st.markdown("---")
        st.markdown("üé≠ Made by [ToanTran](https://toantran.dev)")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán trong st.session_state.chat_history v·ªõi st.markdown
    for i, (user_msg, ai_msg) in enumerate(st.session_state.chat_history):
        if user_msg:
            st.markdown(f"**B·∫°n:** {user_msg}")
        if ai_msg:
            st.markdown(f"**AI:** {ai_msg}")

    # ƒê·∫ßu v√†o c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng v·ªõi st.chat_input
    user_input = st.chat_input(
        placeholder="H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨...",
        key="user_input",
    )

    if user_input:
        st.session_state.messages.append(
            {"role": "user", "content": user_input}
        )
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            response = get_chatgpt_response(
                st.session_state.messages, client=openai_client
            )

        if response:
            st.session_state.messages.append(
                {"role": "assistant", "content": response}
            )
            st.session_state.chat_history.append((user_input, response))

            st.rerun()


if __name__ == "__main__":
    main()
